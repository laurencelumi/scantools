#!/bin/bash
#
# Licensing:
#
# Copyright Â© Laurence Lumi 2017
# Licensed GNU General Public License v3
# which can be found here https://www.gnu.org/licenses/gpl-3.0.en.html
#

progname=`basename $0`
usage()
	{
	echo >&2 ""
	echo >&2 "$progname:" "$@"
        cat << MESSAGE1
USAGE: $progname [-d] [-dd] [-m1] [-p name] [-fb R,G,B] [-dmax value] [-z] [+z] infile [outfile]
USAGE: $progname [-d] [-dd] [-m1] [-p name] [-fb R,G,B] [-dmax value] [-z] [+z] directory
USAGE: $progname [-h] [-help]

OPTIONS:

-d          debug           show intermediate working files for debugging
-dd         debug           show intermediate working files for debugging
-p          profile         saved profile with film base values
-m1         monochrome      monochrome inversion results in a linear gamma similar to printing with 00 grade paper
-dmax       dmax            max expected density above the film base or use auto
-fb         film base       either a single value or three comma seperated values. e.e. .035 or .35,035,035
-z          zip             zip compress the output (the default is to use the same compression as the input)
+z          remove zip      do not compress the output regardless of input

MESSAGE1
exit 1
        }

help()
{
    echo >&2 ""
    echo >&2 "$progname:" "$@"
    cat  >&2 << MESSAGE2

NAME: $progname

PURPOSE: to

Arguments:

TODO

MESSAGE2
exit 1
}

function DEBUG()
{
 [ ! "$debug" -eq 0 ] &&  $@
}
function cleanup {
if [ ! -z "$tmpfileprefix" ] &&  [ "$debug" -eq 0 ]; then
    rm -f "$tmpfileprefix"*
fi
}
trap cleanup EXIT

tmpdir="./"
debug=0
tmpprefix=$tmpdir"_is_"
comment="Processed with invertscan"
DEBUG echo -set comment "$comment"
prof_dir=$HOME/.scantools
approach="m_printing_density"
dmax_default=1.81 #max value cineon

while [ $# -gt 0 ]
do
    # get parameters
    case "$1" in
        -h|-help)    # help information
            echo ""
            help
            ;;
        -d)	debug=1
            ;;
        -dd)	debug=2
            ;;
        -c1)	approach="c_printing_density"
            options+=" -c1"
            ;;
        -m1)	approach="m_printing_density" #monochrome printing density current default
            options+=" -m1"
            ;;
        -p)    # profile name
            shift
            profile_name="$1"
            options+=" -p $1"
            ;;
        -fb)    # film base values
            shift
            foo=(`echo $1 |sed 's/,/\n/g'`)
            if [[ "${#foo[*]}" -eq 1 ]]; then
                r_base="${foo[0]}"
                g_base="${foo[0]}"
                b_base="${foo[0]}"
            else
                r_base="${foo[0]}"
                g_base="${foo[1]}"
                b_base="${foo[2]}"
            fi
            for ((i=0;i<${#foo[*]};i++)); do
                if [[ ! "${foo[i]}" =~ ^[0-9]+\.?[0-9]*$ ]]; then
                    echo "--- fp=${foo[i]} must be a comma seperated positive float value ---"
                    usage
                fi
            done
            options+=" -fb $1"
            ;;
        -dmax)    # dmax value
            shift
            dmax_input="$1"
            if [[ ! "$dmax_input" =~ ^[0-9]+\.?[0-9]*$ ]] && [[ ! "$dmax_input" = "auto" ]];then
                echo "--- dmax_input=$dmax_input must be a positive float value or auto---"
                usage
            fi
            options+=" -dmax $1"
            ;;
        -z)
            zip="-compress zip"
            options+=" -z"
            ;;
        +z)
            zip="+compress"
            options+=" +z"
            ;;
        -)    # STDIN and end of arguments
            break
            ;;
        -*)    # any other - argument
            echo "--- UNKNOWN OPTION ---" $1
            usage
            ;;
        *)     # end of arguments
            break
            ;;
    esac
    shift   # next option
done

infile=$1
outfile=$2


if [ -d $infile ]; then
    echo "processing a directory"
    DEBUG set -x
    outdir=`basename ${infile%".tif"}`-P
    DEBUG   echo outdir: $outdir
    mapfile files < <(ls $infile/*.tif)
    for ((i=0;i<${#files[*]};i++)); do
        echo "processing" ${files[i]}
        DEBUG set -x
        mkdir -p $outdir
        outfile=`basename ${files[i]}`
        outfile="$outdir"/${outfile%".tif"}-P.tif
        invertscan $options $zip ${files[i]} $outfile
        set +x
    done
    exit 0
fi


if [ -z $infile ]; then
    echo "must provide a filename"
    usage
fi
if [ ! -f "$infile" -o ! -r "$infile" ]; then
    echo "Cannot open: $infile"
    exit 1
fi

if [ -z $outfile ]; then
    outfile=`basename ${infile%".tif"}`-P.tif
fi
DEBUG   echo outfile: $outfile

if [[ $infile =~ .*.tif$ ]]; then
    DEBUG echo assuming the input file being tif is saved in a linear colorspace, even though the metadata says otherwise
    CSPACE="-set colorspace RGB"
fi

tmpfileprefix="$tmpprefix"`date +%N``basename "${outfile%.tif}"`
DEBUG echo tmpfileprefix $tmpfileprefix

if [ "$debug" -eq 2 ]; then
    #this statement just shows the input that drivers the clup an input range 0 to (width)
    convert -size 1024x1 xc: \
        -fx "i/(w-1)" \
        -set comment "$comment" +compress "$tmpfileprefix"_input_clut1024.tif
    #this statement just shows the input that drivers the clup an input range 0 to (2^16) and how i/w-1 works perfectly
    convert -size 65536x1 xc: \
        -fx "i/(w-1)" \
        -channel R -fx "debug(u*QuantumRange)" \
        null:
fi

if [ $approach = "m_printing_density" ]; then
    DEBUG echo approach = $approach

    if [ "$debug" -eq 2 ]; then
        convert "$infile[0]" $CSPACE -strip -blur 20x65355 \
        -shave 100x100 \
            -set comment "$comment" +compress "$tmpfileprefix"_input_for_calculations.tif
    fi

    # calculate the film min and maximum values
    eval set -- `convert "$infile[0]" $CSPACE -strip -blur 20x65355 \
        -shave 100x100 \
        -format\
        "%[fx: maxima.r ] %[fx: maxima.g ] %[fx: maxima.b ]\
        %[fx: minima.r ] %[fx: minima.g ] %[fx: minima.b ]"\
        info:`

    echo "Normalised values are:"
    echo "       max      min"
    #     Green: 0.358328 0.0297856
    echo "Red:  " $1 $4
    echo "Green:" $2 $5
    echo "Blue: " $3 $6

    maxmins=($*)
    if [[ -z $r_base ]];then
        r_base=$1
    fi
    if [[ -z $g_base ]];then
        g_base=$2
    fi
    if [[ -z $b_base ]];then
        b_base=$3
    fi
    r_max=$4
    g_max=$5
    b_max=$6

    if [ ! -z $profile_name ]; then
        set -- `tail -1 "$prof_dir"/"$profile_name"`
        r_base=$2
        g_base=$3
        b_base=$4
        echo using profile FB: $1 $r_base $g_base $b_base
    else
        echo using calculated FB: $r_base $g_base $b_base
    fi

    # calculate the film density values
    eval set -- `convert xc: -format\
        "%[fx: -log($r_base) ] \
        %[fx: -log($g_base) ] \
        %[fx: -log($b_base) ] \
        %[fx: -log($r_max) ] \
        %[fx: -log($g_max) ] \
        %[fx: -log($b_max) ] \
        %[fx: -log($r_max) - (-log($r_base)) ] \
        %[fx: -log($g_max) - (-log($g_base)) ] \
        %[fx: -log($b_max) - (-log($b_base)) ] "\
        info:`

    echo "log() values are:"
    echo "       max      min       DMax"
    echo "Red:  " $1 $4 $7
    echo "Green:" $2 $5 $8
    echo "Blue: " $3 $6 $9

    dmax_measured=$9

    densities=($*)
    if [ "$dmax_input" = "auto" ]; then
        dmax=$dmax_measured
        echo using auto calculated dmax
    elif [ -z "$dmax_input" ]; then
        dmax=$dmax_default
        echo using default dmax of:$dmax
    else
        dmax=$dmax_input
    fi

    eval set -- `convert xc: -format "%[fx: 2^16/(10^($dmax*.6)) ]" info:`
    scale=$1
    echo dmax: $dmax
    echo scale: $scale

    #convert per ideas dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
    #    convert $infile[0] -strip $CSPACE \
        #        -channel R -fx "dab=-log(u)-(-log($r_base));(((10^(dab*.6))*$scale)-$scale)/QuantumRange" \
        #        -channel G -fx "dab=-log(u)-(-log($g_base));(((10^(dab*.6))*$scale)-$scale)/QuantumRange" \
        #        -channel B -fx "dab=-log(u)-(-log($b_base));(((10^(dab*.6))*$scale)-$scale)/QuantumRange" \
        #        -colorspace sRGB \
        #        -set comment "$comment" $zip "$outfile"


    #converting to a linear scale is rougly grade 00 paper for ilford

    DEBUG set -x;

    convert -size 65536x1 xc: \
        -fx "i/(w-1)" \
        -channel R -fx "dab=-log(u)-(-log($r_base));(((10^(dab*.6))*$scale)-$scale)/QuantumRange" \
        -channel G -fx "dab=-log(u)-(-log($g_base));(((10^(dab*.6))*$scale)-$scale)/QuantumRange" \
        -channel B -fx "dab=-log(u)-(-log($b_base));(((10^(dab*.6))*$scale)-$scale)/QuantumRange" \
        -set comment "$comment" +compress "$tmpfileprefix"_clut.tif

    if [ "$debug" -eq 2 ]; then
        convert -size 65536x1 xc: \
            -fx "i/(w-1)" \
            -channel B -fx "debug(dab=-log(u)-(-log($b_base)));debug((((10^(dab*.6))*$scale)-$scale)/QuantumRange)" \
            null:
    fi

    if [ ! -x "$(command -v exiftool)" ]; then
        comment="film base:$r_base dmax:$dmax Processed with invertscan"
    else
        exiftool=1
    fi

    convert $infile[0] "$tmpfileprefix"_clut.tif -clut -strip $CSPACE \
        -colorspace sRGB \
        -set comment "$comment" $zip "$outfile"

    if [ $exiftool -eq 1 ]; then

        caption="fb used: $r_base, $g_base, $b_base\n"
        caption+="max:     ${maxmins[0]}, ${maxmins[1]}, ${maxmins[2]}\n"
        caption+="min:     ${maxmins[3]}, ${maxmins[4]}, ${maxmins[5]}\n"
        caption+="log(max):${densities[0]}, ${densities[1]}, ${densities[2]}\n"
        caption+="log(min):${densities[3]}, ${densities[4]}, ${densities[5]}\n"
        caption+="dMax:    ${densities[6]}, ${densities[7]}, ${densities[8]}"
        caption=`printf "$caption"`
        DEBUG echo "$caption"

        exiftool -overwrite_original -Model="DMAX $dmax_input $dmax_measured"\
            "-iptc:caption-abstract=$caption"\
            "$outfile"
    fi

    echo inverting: "$outfile"

fi

if [ $approach = "c_printing_density" ]; then
    DEBUG echo approach = $approach
    echo "Expirmental code"

    if [ "$debug" -eq 2 ]; then
        convert "$infile[0]" $CSPACE -strip -blur 20x65355 \
        -shave 100x100 \
            -set comment "$comment" +compress "$tmpfileprefix"_input_for_calculations.tif
    fi

    # calculate the film min and maximum values
    eval set -- `convert "$infile[0]" $CSPACE -strip -blur 20x65355 \
        -shave 100x100 \
        -format\
        "%[fx: maxima.r ] %[fx: maxima.g ] %[fx: maxima.b ]\
        %[fx: minima.r ] %[fx: minima.g ] %[fx: minima.b ]"\
        info:`

    echo "Normalised values are:"
    echo "       max      min"
    #     Green: 0.358328 0.0297856
    echo "Red:  " $1 $4
    echo "Green:" $2 $5
    echo "Blue: " $3 $6

    maxmins=($*)
    if [[ -z $r_base ]];then
        r_base=$1
    fi
    if [[ -z $g_base ]];then
        g_base=$2
    fi
    if [[ -z $b_base ]];then
        b_base=$3
    fi
    r_max=$4
    g_max=$5
    b_max=$6

    if [ ! -z $profile_name ]; then
        set -- `tail -1 "$prof_dir"/"$profile_name"`
        r_base=$2
        g_base=$3
        b_base=$4
        echo using profile FB: $1 $r_base $g_base $b_base
    else
        echo using calculated FB: $r_base $g_base $b_base
    fi

    # calculate the film density values
    eval set -- `convert xc: -format\
        "%[fx: -log($r_base) ] \
        %[fx: -log($g_base) ] \
        %[fx: -log($b_base) ] \
        %[fx: -log($r_max) ] \
        %[fx: -log($g_max) ] \
        %[fx: -log($b_max) ] \
        %[fx: -log($r_max) - (-log($r_base)) ] \
        %[fx: -log($g_max) - (-log($g_base)) ] \
        %[fx: -log($b_max) - (-log($b_base)) ] "\
        info:`

    echo "log() values are:"
    echo "       max      min       DMax"
    echo "Red:  " $1 $4 $7
    echo "Green:" $2 $5 $8
    echo "Blue: " $3 $6 $9

    dmax_measured=$9

    densities=($*)
    if [ "$dmax_input" = "auto" ]; then
        echo TODO need to do check of all three maxes
        dmax=$dmax_measured
        echo using auto calculated dmax
    elif [ -z "$dmax_input" ]; then
        dmax=$dmax_default
        echo using default dmax of:$dmax
    else
        dmax=$dmax_input
    fi

    #these worked for well for the big portra scans
    rscale=0.852
    gscale=1.063
    bscale=1.082

    #rscale=1
    #gscale=1
    #bscale=1

    eval set -- `convert xc: -format "%[fx: 2^16/(10^($bscale*$dmax*.6)) ]" info:`
    scale=$1
    echo dmax: $dmax
    echo scale: $scale

    #convert per ideas dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
    #    convert $infile[0] -strip $CSPACE \
        #        -channel R -fx "dab=-log(u)-(-log($r_base));(((10^(dab*.6))*$scale)-$scale)/QuantumRange" \
        #        -channel G -fx "dab=-log(u)-(-log($g_base));(((10^(dab*.6))*$scale)-$scale)/QuantumRange" \
        #        -channel B -fx "dab=-log(u)-(-log($b_base));(((10^(dab*.6))*$scale)-$scale)/QuantumRange" \
        #        -colorspace sRGB \
        #        -set comment "$comment" $zip "$outfile"


    DEBUG set -x;

    convert -size 65536x1 xc: \
        -fx "i/(w-1)" \
        -channel R -fx "dab=-log(u)-(-log($r_base));(((10^($rscale*dab*.6))*$scale)-$scale)/QuantumRange" \
        -channel G -fx "dab=-log(u)-(-log($g_base));(((10^($gscale*dab*.6))*$scale)-$scale)/QuantumRange" \
        -channel B -fx "dab=-log(u)-(-log($b_base));(((10^($bscale*dab*.6))*$scale)-$scale)/QuantumRange" \
        -set comment "$comment" +compress "$tmpfileprefix"_clut.tif

    if [ "$debug" -eq 2 ]; then
        convert -size 65536x1 xc: \
            -fx "i/(w-1)" \
            -channel B -fx "debug(dab=-log(u)-(-log($b_base)));debug((((10^(dab*.6))*$scale)-$scale)/QuantumRange)" \
            null:
    fi

    if [ ! -x "$(command -v exiftool)" ]; then
        comment="film base:$r_base dmax:$dmax Processed with invertscan"
    else
        exiftool=1
    fi

    convert $infile[0] "$tmpfileprefix"_clut.tif -clut -strip $CSPACE \
        -colorspace sRGB \
        -profile "$prof_dir"/ra4.icc \
        -set comment "$comment" $zip "$outfile"

    #convert $infile[0] "$tmpfileprefix"_clut.tif -clut -strip $CSPACE \
    #    -color-matrix \
    #    "1.4397684822	-0.3534344629	-0.0863340647
    #-0.0818808588	1.1424821575	-0.06060129
    #-0.0169540131	-0.0896409556	1.1065949943"\
    #    -colorspace sRGB \
    #    -set comment "$comment" $zip "$outfile"

    if [ $exiftool -eq 1 ]; then

        caption="fb used: $r_base, $g_base, $b_base\n"
        caption+="max:     ${maxmins[0]}, ${maxmins[1]}, ${maxmins[2]}\n"
        caption+="min:     ${maxmins[3]}, ${maxmins[4]}, ${maxmins[5]}\n"
        caption+="log(max):${densities[0]}, ${densities[1]}, ${densities[2]}\n"
        caption+="log(min):${densities[3]}, ${densities[4]}, ${densities[5]}\n"
        caption+="dMax:    ${densities[6]}, ${densities[7]}, ${densities[8]}"
        caption=`printf "$caption"`
        DEBUG echo "$caption"

        exiftool -overwrite_original -Model="DMAX $dmax_input $dmax_measured"\
            "-iptc:caption-abstract=$caption"\
            "$outfile"
    fi

    echo inverting: "$outfile"

fi
