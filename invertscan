#!/bin/bash
#
# Licensing:
#
# Copyright Â© Laurence Lumi 2017
# Licensed GNU General Public License v3
# which can be found here https://www.gnu.org/licenses/gpl-3.0.en.html
#

PROGNAME=`basename $0`
message1()
	{
	echo >&2 ""
	echo >&2 "$PROGNAME:" "$@"
        cat << MESSAGE1
USAGE: $PROGNAME [-S show ] [c1  color 1 ] [ -c2 color2 ]
[ -c3 color3 ] [-c4 color4] [ -p profile ] [-m1 mono1 ] [ -m2 mono2 ] [ -g grade ] infile [outfile_prefix]
USAGE: invertscan [-h or -help]

OPTIONS:

-d          debug           show intermediate working files for debugging
-dd         debug           show intermediate working files for debugging
c1          color invert 1  use approach 1
c2          color invert 2  use approach 2
c3          color invert 3  use approach 3
c4          color invert 4  use approach 4
p           profile         film base profile
m1          monochrome      use approach 1
dmax
fb
MESSAGE1
exit 1
        }

message2()
{
    echo >&2 ""
    echo >&2 "$PROGNAME:" "$@"
    cat  >&2 << MESSAGE2

NAME: $PROGNAME

PURPOSE: to


Arguments:

TODO

MESSAGE2
exit 1
}

calcmask()
{
#default to red use a flag to choose
color="r"

# calculate the values to remove the mask
eval set -- `convert "$infile[0]" $CSPACE -strip -blur 0x7 -format \
"%[fx: maxima.intensity/maxima.r ] "\
"%[fx: maxima.intensity/maxima.g ] "\
"%[fx: maxima.intensity/maxima.b ] "\
"%[fx: -log(minima.$color) -  (-log(maxima.$color)) ] "\
  info:`

R_FILTER=$1
G_FILTER=$2
B_FILTER=$3
MAXIMUM_DENSITY_ABOVE_FILM_BASE=$4
echo Results are in:
echo Filtration values to remove mask
echo Red: $R_FILTER
echo Green: $G_FILTER
echo Red : $B_FILTER
echo Maximum Density above film base
echo $MAXIMUM_DENSITY_ABOVE_FILM_BASE
}

function DEBUG()
{
 [ ! "$debug" -eq 0 ] &&  $@
}

tmpdir="./"
debug=0
tmpprefix=$tmpdir"_is_"
COMMENT="Processed with invertscan"
DEBUG echo -set comment "$COMMENT"
PROF_DIR=$HOME/.scantools
ZIP="-compress zip"
approach="m_printing_density"

while [ $# -gt 0 ]
do
    # get parameters
    case "$1" in
        -h|-help)    # help information
            echo ""
            message2
            ;;
        -d)	debug=1
            ;;
        -dd)	debug=2
            ;;
        -c6)	approach="c_invert_dpx"
            ;;
        -c7)	approach="c_rethink_2"
            ;;
        -c8)	approach="c_printing_density"
            ;;
        -m1)	approach="m_printing_density" #monochrome printing density current default
            ;;
        -p)    # profile name
            shift
            profile_name="$1"
            ;;
        -fb)    # profile name
            shift
            fb="$1"
            ;;
        -dmax)    # profile name
            shift
            dmax="$1"
            ;;
        -)    # STDIN and end of arguments
            break
            ;;
        -*)    # any other - argument
            echo "--- UNKNOWN OPTION ---"
            message1
            ;;
        *)     # end of arguments
            break
            ;;
    esac
    shift   # next option
done

infile=$1
outfile=$2

if [ -z $infile ]; then
    echo "must provide a filename"
    message2
fi
if [ ! -f "$infile" -o ! -r "$infile" ]; then
    echo "Cannot open: $infile"
    exit 1
fi

if [ -z $outfile ]; then
    outfile=`basename ${infile%".tif"}_P.tif`
fi
DEBUG   echo outfile: $outfile

if [[ $infile =~ .*.tif$ ]]; then
    DEBUG echo assuming the input file being tif is saved in a linear colorspace, even though the metadata says otherwise
    CSPACE="-set colorspace RGB"
fi

tmpprefix="$tmpprefix"`basename "${infile%.tif}"`
DEBUG echo tmpprefix $tmpprefix

if [ "$debug" -eq 2 ]; then
    #this statement just shows the input that drivers the clup an input range 0 to (width)
    convert -size 1024x1 xc: \
        -fx "i/(w-1)" \
        -set comment "$COMMENT" $ZIP "$tmpprefix"_input_clut1024.tif
    #this statement just shows the input that drivers the clup an input range 0 to (2^16) and how i/w-1 works perfectly
    convert -size 65536x1 xc: \
        -fx "i/(w-1)" \
        -channel R -fx "debug(u*QuantumRange)" \
        null:
fi

if [ $approach = "m_printing_density" ]; then
    DEBUG echo approach = $approach

    
    if [ "$debug" -eq 2 ]; then
        convert "$infile[0]" $CSPACE -strip -blur 100x5 \
        -shave 100x100 \
            -set comment "$COMMENT" $ZIP "$tmpprefix"_input_for_calculations.tif
    fi

    # calculate the film value and maxmim density, ideally this should be calculated before and passed in
    eval set -- `convert "$infile[0]" $CSPACE -strip -blur 100x5 \
        -shave 100x100 \
        -format\
        "%[fx: maxima.r ] %[fx: maxima.g ] %[fx: maxima.b ]\
        %[fx: minima.r ] %[fx: minima.g ] %[fx: minima.b ]"\
        info:`

    echo "Normalised values are:"
    echo "       max      min"
    #     Green: 0.358328 0.0297856
    echo "Red:  " $1 $4 
    echo "Green:" $2 $5
    echo "Blue: " $3 $6
    R_BASE=$1
    G_BASE=$2
    B_BASE=$3
    R_MAX=$4
    G_MAX=$5
    B_MAX=$6

    if [ ! -z $profile_name ]; then
        set -- `tail -1 "$PROF_DIR"/"$profile_name"`
        R_BASE=$2
        G_BASE=$3
        B_BASE=$4
        echo using FB: $1 $R_BASE $G_BASE $B_BASE
    else  
        echo this need to be removed
        R_BASE=0.358396
        G_BASE=0.358396
        B_BASE=0.358396
        echo using FB: $R_BASE $G_BASE $B_BASE
    fi

    # calculate the values to remove the mask
    eval set -- `convert xc: -format\
        "%[fx: -log($R_BASE) ] \
        %[fx: -log($G_BASE) ] \
        %[fx: -log($B_BASE) ] \
        %[fx: -log($R_MAX) ] \
        %[fx: -log($G_MAX) ] \
        %[fx: -log($B_MAX) ] \
        %[fx: -log($R_MAX) - (-log($R_BASE)) ] \
        %[fx: -log($G_MAX) - (-log($G_BASE)) ] \
        %[fx: -log($B_MAX) - (-log($B_BASE)) ] "\
        info:`

    echo "log() values are:"
    echo "       max      min       DMax"
    echo "Red:  " $1 $4 $7
    echo "Green:" $2 $5 $8
    echo "Blue: " $3 $6 $9

    dmax_measured=$9

    echo RGB BASE: $R_BASE $G_BASE $B_BASE

    dmax=1.2
    #dmax=2
    eval set -- `convert xc: -format "%[fx: 2^16/(10^($dmax*.6)) ]" info:`
    scale=$1
    echo dmax: $dmax
    echo scale: $scale

    #convert per ideas dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
    #    convert $infile[0] -strip $CSPACE \
        #        -channel R -fx "DAB=-log(u)-(-log($R_BASE));(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        #        -channel G -fx "DAB=-log(u)-(-log($G_BASE));(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        #        -channel B -fx "DAB=-log(u)-(-log($B_BASE));(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        #        -colorspace sRGB \
        #        -set comment "$COMMENT" $ZIP "$outfile"


    #converting to a linear scale is rougly grade 00 paper for ilford

    DEBUG set -x;

    convert -size 65536x1 xc: \
        -fx "i/(w-1)" \
        -channel R -fx "DAB=-log(u)-(-log($R_BASE));(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        -channel G -fx "DAB=-log(u)-(-log($G_BASE));(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        -channel B -fx "DAB=-log(u)-(-log($B_BASE));(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        -set comment "$COMMENT" $ZIP "$tmpprefix"_clut.tif

    if [ "$debug" -eq 2 ]; then
        convert -size 65536x1 xc: \
            -fx "i/(w-1)" \
            -channel B -fx "debug(DAB=-log(u)-(-log($B_BASE)));debug((((10^(DAB*.6))*$scale)-$scale)/QuantumRange)" \
            null:
    fi

    if [ ! -x "$(command -v exiftool)" ]; then
        COMMENT="film base:$R_BASE dmax:$dmax Processed with invertscan"
    else
        exiftool=1
    fi

    convert $infile[0] "$tmpprefix"_clut.tif -clut -strip $CSPACE \
        -colorspace sRGB \
        -set comment "$COMMENT" $ZIP "$outfile"

    if [ $exiftool -eq 1 ]; then
        #exiftool -overwrite_original -Model="FB $R_BASE,$G_BASE,$B_BASE DMAX $dmax $dmax_measured" "$outfile"
        exiftool -overwrite_original -Model="FB $B_BASE DMAX $dmax $dmax_measured" "$outfile"
    fi

    echo inverting: "$outfile"

fi

############################the rest need refactoring

if [ $approach = "c_invert_dpx" ]; then
    echo approach = $approach

# calculate the values of the film base
eval set -- `convert "$infile[0]"  $CSPACE -strip -blur 0x7 -format \
"%[fx: maxima.r ] "\
"%[fx: maxima.g ] "\
"%[fx: maxima.b ] "\
  info:`

R_BASE=$1
G_BASE=$2
B_BASE=$3

    #convert per dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
    convert $infile[0] -strip $CSPACE \
        -channel R -fx "DAB=-log(u)-(-log($1));(95+500*DAB)/1024)" \
        -channel G -fx "DAB=-log(u)-(-log($2));(95+500*DAB)/1024" \
        -channel B -fx "DAB=-log(u)-(-log($3));(95+500*DAB)/1024" \
        -set comment "$COMMENT" $ZIP "$outfile"

    #convert per dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
    convert $infile[0] -strip $CSPACE \
        -channel R -fx "DAB=-log(u)-(-log($1));dpx=95+500*DAB;(10^((dpx-685)*0.002*.6))*4095/2^16" \
        -channel G -fx "DAB=-log(u)-(-log$2));dpx=95+500*DAB;(10^((dpx-685)*0.002*.6))*4095/2^16" \
        -channel B -fx "DAB=-log(u)-(-log($3));dpx=95+500*DAB;(10^((dpx-685)*0.002*.6))*4095/2^16" \
        -colorspace sRGB \
        -set comment "$COMMENT" $ZIP dpx_lin_"$outfile"

    #convert per dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
    convert $infile[0] -strip $CSPACE \
        -channel R -fx "DAB=-log(u)-(-log($1));dpx=500*DAB;(10^((dpx-685)*0.002*.6))*4095/2^16" \
        -channel G -fx "DAB=-log(u)-(-log$2));dpx=500*DAB;(10^((dpx-685)*0.002*.6))*4095/2^16" \
        -channel B -fx "DAB=-log(u)-(-log($3));dpx=500*DAB;(10^((dpx-685)*0.002*.6))*4095/2^16" \
        -colorspace sRGB \
        -set comment "$COMMENT" $ZIP dpx_lin_2"$outfile"

fi

if [ $approach = "c_rethink_2" ]; then
    echo approach = $approach

#calcmask

# calculate the values to remove the mask
eval set -- `convert "$infile[0]" $CSPACE -strip -blur 100x5 -format \
"%[fx: maxima.r ] "\
"%[fx: maxima.g ] "\
"%[fx: maxima.b ] "\
"%[fx: minima.r ] "\
"%[fx: minima.g ] "\
"%[fx: minima.b ] "\
"%[fx: minima.r/maxima.r ] "\
"%[fx: minima.g/maxima.g ] "\
"%[fx: minima.b/maxima.b ] "\
  info:`

echo Results are:
echo Red: $1 $4 $7
echo Green: $2 $5 $8
echo Blue : $3 $6 $9

# calculate the values to remove the mask
eval set -- `convert "$infile[0]" $CSPACE -strip -blur 100x5 -format \
"%[fx: -log(maxima.r) ] "\
"%[fx: -log(maxima.g) ] "\
"%[fx: -log(maxima.b) ] "\
"%[fx: -log(minima.r) ] "\
"%[fx: -log(minima.g) ] "\
"%[fx: -log(minima.b) ] "\
"%[fx: -log(minima.r) - (-log(maxima.r)) ] "\
"%[fx: -log(minima.g) - (-log(maxima.g)) ] "\
"%[fx: -log(minima.b) - (-log(maxima.b)) ] "\
  info:`

echo LOG Results are:
echo Red: $1 $4 $7
echo Green: $2 $5 $8
echo Blue : $3 $6 $9

dmax=$9

#eval set -- `convert "$infile[0]" $CSPACE -strip -blur 0x7 -format \
# calculate the values of the film base
eval set -- `convert "$infile[0]" $CSPACE -strip -format \
"%[fx: maxima.r ] "\
"%[fx: maxima.g ] "\
"%[fx: maxima.b ] "\
  info:`

R_BASE=$1
G_BASE=$2
B_BASE=$3

#R_BASE=0.664352
#G_BASE=0.677719
#B_BASE=0.641433


echo RGB: $R_BASE $G_BASE $B_BASE

# calculate the values of the film base
#eval set -- `convert "$infile[0]" $CSPACE -strip -blur 100x7 -format \
#"%[fx: maxima.r ] "\
#"%[fx: maxima.g ] "\
#"%[fx: maxima.b ] "\
#  info:`

#R_BASE=$1
#G_BASE=$2
#B_BASE=$3

#echo RGB: $R_BASE $G_BASE $B_BASE

    #convert per ideas dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
#    convert $infile[0] -strip $CSPACE \
#        -channel R -fx "DAB=log(1/u)-log(1/$1);debug(DAB);debug(1/10^(DAB*.6));(1/10^(DAB*.6))" \
#        -channel G -fx "DAB=log(1/u)-log(1/$2);;(1/10^(DAB*.6))" \
#        -channel B -fx "DAB=log(1/u)-log(1/$3);;(1/10^(DAB*.6))" \
#        -colorspace sRGB \
#        -set comment "$COMMENT" $ZIP "$outfile"

    #convert per ideas dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
#    convert $infile[0] -strip $CSPACE \
#       -channel R -fx "DAB=log(1/u)-log(1/$1);;(10^(DAB*.6))*.1" \
#        -channel G -fx "DAB=log(1/u)-log(1/$2);;(10^(DAB*.6))*.1" \
#        -channel B -fx "DAB=log(1/u)-log(1/$3);;(10^(DAB*.6))*.1" \
#        -colorspace sRGB \
#        -set comment "$COMMENT" $ZIP "$outfile"

    #convert per ideas dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
    convert $infile[0] -strip $CSPACE \
        -channel R -fx "DAB=log(1/u)-log(1/$1);(10^((DAB-$dmax)*.6))" \
        -channel G -fx "DAB=log(1/u)-log(1/$2);(10^((DAB-$dmax)*.6))" \
        -channel B -fx "DAB=log(1/u)-log(1/$3);(10^((DAB-$dmax)*.6))" \
        -colorspace sRGB \
        -set comment "$COMMENT" $ZIP "$outfile"

    #convert per ideas dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
    convert $infile[0] -strip $CSPACE \
        -channel R -fx "DAB=log(1/u)-log(1/$1);(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        -channel G -fx "DAB=log(1/u)-log(1/$2);(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        -channel B -fx "DAB=log(1/u)-log(1/$3);(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        -colorspace sRGB \
        -set comment "$COMMENT" $ZIP _"$outfile"

fi

if [ $approach = "c_printing_density" ]; then
    echo approach = $approach

#scale the to match printing density
newfile=tmp_"$infile"

    #convert per ideas dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
#    convert $infile[0] -strip $CSPACE \
#        -channel R -fx "u^1.7" \
#        -channel G -fx "u^1.15" \
#        -set comment "$COMMENT" $ZIP "$newfile"

    #convert per ideas dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
    convert $infile[0] -strip $CSPACE \
        -channel R -fx "u^1.12" \
        -channel G -fx "u^1.05" \
        -set comment "$COMMENT" $ZIP "$newfile"

    #kodak 400
    #convert $infile[0] -strip $CSPACE \
    #    -channel R -fx "u^1.6" \
    #    -channel G -fx "u^1.15" \
    #    -set comment "$COMMENT" $ZIP "$newfile"

#calcmask



# calculate the values to remove the mask
eval set -- `convert "$newfile[0]" $CSPACE -strip -blur 100x5 -format \
"%[fx: maxima.r ] "\
"%[fx: maxima.g ] "\
"%[fx: maxima.b ] "\
"%[fx: minima.r ] "\
"%[fx: minima.g ] "\
"%[fx: minima.b ] "\
"%[fx: minima.r/maxima.r ] "\
"%[fx: minima.g/maxima.g ] "\
"%[fx: minima.b/maxima.b ] "\
  info:`

echo LOG Results are:
echo Red: $1 $4 $7
echo Green: $2 $5 $8
echo Blue : $3 $6 $9

# calculate the values to remove the mask
eval set -- `convert "$newfile[0]" $CSPACE -strip -blur 100x5 -format \
"%[fx: -log(maxima.r) ] "\
"%[fx: -log(maxima.g) ] "\
"%[fx: -log(maxima.b) ] "\
"%[fx: -log(minima.r) ] "\
"%[fx: -log(minima.g) ] "\
"%[fx: -log(minima.b) ] "\
"%[fx: -log(minima.r) - (-log(maxima.r)) ] "\
"%[fx: -log(minima.g) - (-log(maxima.g)) ] "\
"%[fx: -log(minima.b) - (-log(maxima.b)) ] "\
  info:`

echo LOG Results are:
echo Red: $1 $4 $7
echo Green: $2 $5 $8
echo Blue : $3 $6 $9

dmax=$9

#eval set -- `convert "$newfile[0]" $CSPACE -strip -blur 0x7 -format \
# calculate the values of the film base
eval set -- `convert "$newfile[0]" $CSPACE -strip -format \
"%[fx: maxima.r ] "\
"%[fx: maxima.g ] "\
"%[fx: maxima.b ] "\
  info:`

R_BASE=$1
G_BASE=$2
B_BASE=$3

echo RGB: $R_BASE $G_BASE $B_BASE

    #convert per ideas dpx http://dicomp.arri.de/digital/digital_systems/DIcompanion/ch03.html#scene2digital_linfull
    convert $newfile[0] -strip $CSPACE \
        -channel R -fx "DAB=log(1/u)-log(1/$1);(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        -channel G -fx "DAB=log(1/u)-log(1/$2);(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        -channel B -fx "DAB=log(1/u)-log(1/$3);(((10^(DAB*.6))*$scale)-$scale)/QuantumRange" \
        -colorspace sRGB \
        -set comment "$COMMENT" $ZIP "$outfile"

fi

if [ "$debug" -eq 0 ]; then
    rm -f "$tmpprefix"*
fi

