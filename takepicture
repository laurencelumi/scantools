#!/bin/bash
#
# Licensing:
#
# Copyright Â© Laurence Lumi 2017
# Licensed GNU General Public License v3
# which can be found here https://www.gnu.org/licenses/gpl-3.0.en.html
#

PROGNAME=`basename $0`
message1()
	{
	echo >&2 ""
	echo >&2 "$PROGNAME:" "$@"
        cat << MESSAGE1
USAGE: takepicture [-f fuzz ] [-m mirror ] [ -r rotate ]
[ -a all boxes ] [-e extend] [-s show mask] [ -n number ] infile [outfile_prefix]
USAGE: takepicture [-h or -help]

OPTIONS:

-f          fuzz           fuzz value used a threshold for removing any white areas from the scan
                           if brighest area of the film base is 75% then the threshold should be less than 25%
                           expressed as (integer) percent 0 to 100;
                           default=25
-m          mirror         flips the image after it has been cropped usefull if the negative was scanned emulsion down
-r          rotate         rotates the image after being cropped, positive integer <= 360
-a          all boxes      include crops of all boxes, inluding the gaps between frames usefull for debugging
-e          extend         extends the crop X pixels
-s          show mask      show how the mask was created usefull for debugging
-n          frane number   the starting frame number to use file name defaults to #1
MESSAGE1
exit 1
	}
message2()
{
    echo >&2 ""
    echo >&2 "$PROGNAME:" "$@"
    cat  >&2 << MESSAGE2

NAME: takepicture

PURPOSE: digital simulation of film negative for testing purposes, point the camera at jpg and take a picture


Arguments:

-f          fuzz           fuzz value used a threshold for removing any white areas from the scan
                           if brighest area of the film base is 75% then the threshold should be less than 25%
                           expressed as (integer) percent 0 to 100;
                           default=25
-m          mirror         flips the image after it has been cropped usefull if the negative was scanned emulsion down
-r          rotate         rotates the image after being cropped, positive integer <= 360
-a          all boxes      include crops of all boxes, inluding the gaps between frames usefull for debugging
-e          extend         extends the crop X pixels
-S          show mask      show how the mask was created usefull for debugging
MESSAGE2
exit 1
}

tmpdir="./"
tmpprefix=$tmpdir"_tp_"
COMMENT="Processed with takepicture"
M_GAMMA=1.625 #ISO film gamma
R_GAMMA=1.807 #Portra 400 as default
G_GAMMA=1.817 #Portra 400 as default
B_GAMMA=1.563 #Portra 400 as default
B_POINT=0.005 #not sure what do with this
PROF_DIR=$HOME/.scantools
ZIP="-compress zip"
approach="c_invert_then_BP_then_gamma"
showtmp=0

while [ $# -gt 0 ]
do
    # get parameters
    case "$1" in
        -h|-help)    # help information
            echo ""
            message2
            ;;
        -)    # STDIN and end of arguments
            break
            ;;
        -*)    # any other - argument
            echo "--- UNKNOWN OPTION ---"
            message1
            ;;
        *)     # end of arguments
            break
            ;;
    esac
    shift   # next option
done

infile=$1
outfile=$2

if [ -z $infile ]; then
    echo "must provide a filename"
    message2
fi
if [ ! -f "$infile" -o ! -r "$infile" ]; then
    echo "Cannot open: $infile"
    exit 1
fi

if [ -z $outfile ]; then
    outfile=${infile%".jpg"}_N.tif
    echo outfile: $outfile
fi

tmpfile="$tmpprefix""${infile%.jpg}"

#step to a linear capture

convert $infile -depth 16 -fx "Fy=((u)*100+16)/116;delta=6/29;Fy>delta?Fy^3:(Fy-16/116)3*delta^2" -type TrueColor "$tmpfile"_linear_cap.tif

#next invert

Jn_MIN=0.015

#convert "$tmpfile"_linear_cap.tif -strip $CSPACE  \
#     +channel -fx " (u-$BP)/(1-$BP)" \
#    -comment "$COMMENT" "$tmpfile"_BP.tif


convert "$tmpfile"_linear_cap.tif -strip \
    -channel R -fx "Fx=log(u/(1/128));10^-(.15+(Fx>0?.5534*Fx:0))" \
    -channel G -fx "Fx=log(u/(1/128));10^-(.7+(Fx>0?.5534*Fx:0))" \
    -channel B -fx "Fx=log(u/(1/128));10^-(.8+(Fx>0?.6384*Fx:0))" \
    -comment "$COMMENT" "$tmpfile"_inverted_only.tif

convert "$tmpfile"_inverted_only.tif -set colorspace RGB -colorspace sRGB -comment "$COMMENT" "$tmpfile"_inverted_with_sRGB.tif

#working with the step wedge
#convert "$tmpfile"_linear_cap.tif -strip \
#    -fx "10^(-(0.5 * Log(u/0.001107)))" \
#    -comment "$COMMENT" "$tmpfile"_inverted_only_singl_channel.tif

exit 0
