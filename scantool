#!/bin/bash
#
# Licensing:
#
# Copyright Â© Laurence Lumi 2017
# Licensed GNU General Public License v3
# which can be found here https://www.gnu.org/licenses/gpl-3.0.en.html
#
PROGNAME=`basename $0`
message1()
	{
	echo >&2 ""
	echo >&2 "$PROGNAME:" "$@"
        cat << MESSAGE1
<<<<<<< HEAD
USAGE: $PROGNAME [-S show ] [c1  color 1 ] [ -c2 color2 ]
[ -c3 color3 ] [-c4 color4] [ -p profile ] [-m1 mono1 ] [ -m2 mono2 ] [ -g grade ] infile [outfile_prefix]
USAGE: $PROGNAME [-h or -help]
=======
USAGE: $PROGNAME frames | invert | both [-d] [-dd] [-n number] [-p name] [-fb R,G,B] [-dmax value] infile [outfile_prefix]
USAGE: $PROGNAME [-h ]  [-help]
>>>>>>> dev

OPTIONS:

MESSAGE1
exit 1
	}
message2()
{
    echo >&2 ""
    echo >&2 "$PROGNAME:" "$@"
    cat  >&2 << MESSAGE2

NAME: $PROGNAME

PURPOSE: to crop separate frames of a trimmed film strip


Arguments:
TODO

MESSAGE2
exit 1
}
function DEBUG()
{
 [ ! "$debug" -eq 0 ] &&  $@
}

tmpdir="./"
debug=0
tmpprefix=$tmpdir"_st_"
framenumber=1

if [ "$1" = "frames" ]; then
    mode="frames"
    shift
elif [ "$1" = "invert" ]; then
    mode="invert"
    shift
elif [ "$1" = "both" ]; then
    mode="both"
    shift
else
    echo "must specify either frames or invert or both"
    message2
fi

while [ $# -gt 0 ]
do
    # get parameters
    case "$1" in
        -h|-help)    # help information
            echo ""
            message2
            ;;
        -d)	debug=1
            ;;
        -n)    # number
            shift
            framenumber="$1"
            if [[ ! "$framenumber" =~ ^[0-9]+$ ]]; then
                echo "--- framenumber=$framenumber must be a integer value  ---"
                message1
            fi
            ;;
        -p)    # profile name
            shift
            options+=" -p $1"
            ;;
<<<<<<< HEAD
        -fb)    # profile name
=======
        -fb)    # film base values
>>>>>>> dev
            shift
            foo=(`echo $1 |sed 's/,/\n/g'`)
            for ((i=0;i<${#foo[*]};i++)); do
                if [[ ! "${foo[i]}" =~ ^[0-9]+\.?[0-9]*$ ]];then
                    echo "--- fp=${foo[i]} must be a comma seperated positive float value ---"
                    message1
                fi
            done
            options+=" -fb $1"
            ;;
<<<<<<< HEAD
        -dmax)    # profile name
=======
        -dmax)    # dmax value
>>>>>>> dev
            shift
            dmax="$1"
            if [[ ! "$dmax" =~ ^[0-9]+\.?[0-9]*$ ]];then
                echo "--- dmax=$dmax must be a positive float value ---"
                message1
            fi
            options+=" -dmax $1"
            ;;
        -)    # STDIN and end of arguments
            break
            ;;
        -*)    # any other - argument
            echo "--- UNKNOWN OPTION ---"
            message1
            ;;
        *)     # end of arguments
            break
            ;;
    esac
    shift   # next option
done

infile=$1
outprefix=$2


if [ -z $infile ]
then
    echo "must provide a filename"
    message2
fi
if [ ! -f "$infile" -o ! -r "$infile" ]; then
    echo "Cannot open: $infile"
    exit 1
fi

if [ -z $outprefix ]; then
<<<<<<< HEAD
    outprefix=${infile%".tif"}_
else
    outprefix=${outprefix%".tif"}_
=======
    outprefix=${infile%".tif"}_frame
else
    outprefix=${outprefix%".tif"}
>>>>>>> dev
fi
tmpoutprefix="$tmpprefix"`basename "$outprefix"`
DEBUG echo tmpoutprefix: $tmpoutprefix
DEBUG echo outprefix: $outprefix

if [ $mode = "frames" ] || [ $mode = "both" ]; then
invertfiles=()
DEBUG set -x;

    #because the strips of film will contain at some gaps the fuzz threshhold can be increased
    mapfile files < <(vtrimscan holder -f 10 $infile $tmpoutprefix | sed 's/^cropping //g' )
    DEBUG echo files: ${files[*]}


    for ((i=0;i<${#files[*]};i++)); do

        mapfile filesJ < <(vtrimscan holder -r 90 ${files[i]} | grep -v orientating | sed 's/^cropping //g' )
        DEBUG echo files j:${filesJ[*]}
        for ((j=0;j<${#filesJ[*]};j++)); do
            mapfile filesK < <(vtrimscan gap ${filesJ[j]} | sed 's/^cropping //g' )
            DEBUG echo files k:${filesK[*]}
            for ((k=0;k<${#filesK[*]};k++)); do
<<<<<<< HEAD
                OUTFILE="$outprefix"frame-"$framenumber".tif
=======
                OUTFILE="$outprefix"-"$framenumber".tif
>>>>>>> dev
                framenumber=$((framenumber+1))
                mv ${filesK[k]} $OUTFILE
                if [ "$debug" -gt 0 ]; then
                    ln -f $OUTFILE ${filesK[k]}
                fi
                echo saving $OUTFILE
                invertfiles+=($OUTFILE)
            done
        done
    done
fi

if [ $mode = "invert" ] || [ $mode = "both" ]; then


    for ((i=0;i<${#invertfiles[*]};i++)); do
        invertscan -m1 $options ${invertfiles[i]}
    done


fi

if [ "$debug" -eq 0 ]; then
    rm -f "$tmpoutprefix"*
fi
