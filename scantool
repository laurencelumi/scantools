#!/bin/bash
#
# Licensing:
#
# Copyright Â© Laurence Lumi 2017
# Licensed GNU General Public License v3
# which can be found here https://www.gnu.org/licenses/gpl-3.0.en.html
#
PROGNAME=`basename $0`
message1()
	{
	echo >&2 ""
	echo >&2 "$PROGNAME:" "$@"
        cat << MESSAGE1
USAGE: $PROGNAME [-S show ] [c1  color 1 ] [ -c2 color2 ]
[ -c3 color3 ] [-c4 color4] [ -p profile ] [-m1 mono1 ] [ -m2 mono2 ] [ -g grade ] infile [outfile_prefix]
USAGE: $PROGNAME [-h or -help]

OPTIONS:

MESSAGE1
exit 1
	}
message2()
{
    echo >&2 ""
    echo >&2 "$PROGNAME:" "$@"
    cat  >&2 << MESSAGE2

NAME: $PROGNAME

PURPOSE: to crop separate frames of a trimmed film strip


Arguments:
TODO

MESSAGE2
exit 1
}
function DEBUG()
{
 [ ! "$debug" -eq 0 ] &&  $@
}

tmpdir="./"
debug=0
tmpprefix=$tmpdir"_st_"

if [ "$1" = "frames" ]; then
    mode="frames"
    shift
elif [ "$1" = "invert" ]; then
    mode="invert"
    shift
elif [ "$1" = "both" ]; then
    mode="both"
    shift
else
    echo "must specify either frames or invert or both"
    message2
fi


while [ $# -gt 0 ]
do
    # get parameters
    case "$1" in
        -h|-help)    # help information
            echo ""
            message2
            ;;
        -d)	debug=1
            ;;
        -)    # STDIN and end of arguments
            break
            ;;
        -*)    # any other - argument
            echo "--- UNKNOWN OPTION ---"
            message1
            ;;
        *)     # end of arguments
            break
            ;;
    esac
    shift   # next option
done

infile=$1
outprefix=$2

if [ -z $infile ]
then
    echo "must provide a filename"
    message2
fi
if [ ! -f "$infile" -o ! -r "$infile" ]; then
    echo "Cannot open: $infile"
    exit 1
fi

if [ -z $outprefix ]; then
    outprefix=${infile%".tif"}_
else
    outprefix=${outprefix%".tif"}_
fi
tmpoutprefix="$tmpprefix"`basename "$outprefix"`
DEBUG echo outprefix: $tmpoutprefix

if [ $mode = "frames" ] || [ $mode = "both" ]; then 
DEBUG set -x;

    mapfile files < <(vtrimscan holder $infile $tmpoutprefix | sed 's/^cropping //g' ) 
    DEBUG echo ${files[*]}


    for ((i=0;i<${#files[*]};i++)); do

        DEBUG echo processing i ${files[i]}
        mapfile filesJ < <(vtrimscan holder -r 90 ${files[i]} | grep -v orientating | sed 's/^cropping //g' ) 
        DEBUG echo ${filesJ[*]}
        for ((j=0;j<${#filesJ[*]};j++)); do 
            DEBUG echo processing j ${filesJ[j]}
            vtrimscan gap ${filesJ[j]}
        done
    done
    #stripscan -s 8 -r 90 "$infile".tif
    #stripscan -r 90 "$infile".tif

    #for i in `ls "$infile"_strip-*`; do
    #    #framescan -S -f 3 $i
    #    framescan -f 3 $i
    #done

    #mkdir -p "$infile"_frames
    #mv "$infile"_strip*_frame* "$infile"_frames

    #if [ "$showtmp" -eq 0 ]; then
    #    rm -f "$infile"_strip-*
    #else
    #    mkdir -p "$infile"_strips
    #    mv "$infile"_strip-* "$infile"_strips
    #fi
fi

if [ $mode = "invert" ] || [ $mode = "both" ]; then 


    echo ls "$infile"_frames
    for i in `ls "$infile"_frames`; do
        #echo invertscan -"$invertscan" "$infile""_frames/"$i
        invertscan -m -$invertscan "$infile""_frames/"$i
        mkdir -p "$infile"_frames_P
        mv "${i%.tif}"_P.tif "$infile"_frames_P
    done


fi

if [ "$debug" -eq 0 ]; then
    rm -f "$tmpoutprefix"*
fi
